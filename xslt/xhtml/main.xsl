<?xml version="1.0" encoding="utf-8"?>
<!--
    Copyright (c) 2008, Horst Gutmann <zerok@zerokspot.com>
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are 
    met:

        * Redistributions of source code must retain the above copyright 
          notice, this list of conditions and the following disclaimer.
        * Redistributions in binary form must reproduce the above copyright 
          notice, this list of conditions and the following disclaimer in the 
          documentation and/or other materials provided with the distribution.
        * Neither the name of the author nor the names of its 
          contributors may be used to endorse or promote products derived from 
          this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
    IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
    CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
    EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
    LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    
    ==========================================================================
    
    This is a simple XSLT for transforming an OWL file as generated by 
    Protégé 4.0.x into XHTML. It supports for now just one external
    parameter: "stylesheet". Use this to pass a CSS file or URL
    to the XSLT.
-->
<!DOCTYPE xsl:stylesheet [
    <!ENTITY local-cond "starts-with(@rdf:about, '#') or boolean(@rdf:ID)">
]>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:owl="http://www.w3.org/2002/07/owl#"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
    xmlns="http://www.w3.org/TR/xhtml1/strict">
    
    <xsl:param name="stylesheet" />
    <xsl:variable name="namespace" select="/rdf:RDF/@xml:base"/>
    <xsl:variable name="title">
        <xsl:value-of select="/rdf:RDF/owl:Ontology/rdfs:label" />
    </xsl:variable>
    <xsl:variable name="datatypeProperties"
        select="/rdf:RDF/owl:DatatypeProperty[&local-cond;]" 
        />
    <xsl:variable name="objectProperties"
        select="/rdf:RDF/owl:ObjectProperty[&local-cond;]"
        />
    <xsl:variable name="classes"
        select="/rdf:RDF/owl:Class[&local-cond;]"
        />
        
    <!-- === BASE =========================================================-->
    <xsl:template match="/">
        <html>
            <head>
                <title><xsl:value-of select="$title" /></title>
                <style type="text/css">
                    cite {font-style:italic}
                    ul, dd {margin:0; padding:0;}
                    #page {
                        color: #222; width: 750px; margin: auto;}
                    .toc.inline li {
                        float: left; margin: 0 5px 0 0;}
                    .toc.inline li:before{
                        content: ", ";}
                    .toc.inline li:first-child:before{
                        content: none;}
                    .toc.inline ul {
                        list-style: none; overflow: hidden;}
                    a:link {color: #0054C2}
                    h1 {color: #003C8B}
                    dl {
                        overflow:hidden; border-bottom: 1px dotted #AAA;
                        margin: 0; padding: 5px 0}
                    dt {font-weight: bold; float: left; width: 35%}
                    dd {float:right; width: 65%}
                    h2 {
                        background-color: #99C5FF; padding: 3px}
                    h3 {
                        background-color: #D1E4FD; padding: 3px}
                </style>
                <xsl:if test="$stylesheet">
                    <link rel="stylesheet" type="text/css"
                         href="{$stylesheet}" />
                </xsl:if>
                
            </head>
            <body><div id="page">
                <xsl:apply-templates />
            </div></body>
        </html>
    </xsl:template>
    <xsl:template match="rdf:RDF">
        <xsl:apply-templates select="./owl:Ontology" />
        <div id="toc">
            <h2 class="title">Table of Contents:</h2>
            <div id="toc_classes" class="toc inline">
                <h3><xsl:value-of select="count($classes)" /> classes:</h3>
                <ul class="toc">
                    <xsl:apply-templates select="$classes" mode="toc" />
                </ul>
            </div>
            <xsl:if test="boolean(./owl:ObjectProperty)">
                <div id="toc_objectproperties" class="toc inline">
                    <h3><xsl:value-of select="count($objectProperties)" />
                        object properties:</h3>
                    <ul class="toc">
                        <xsl:apply-templates mode="toc"
                             select="$objectProperties" />
                    </ul>
                </div>
            </xsl:if>
            <xsl:if test="boolean(./owl:DatatypeProperty)">
                <div id="toc_datatypeproperties" class="toc inline">
                    <h3><xsl:value-of select="count($datatypeProperties)" />
                        datatype properties:</h3>
                    <ul class="toc">
                        <xsl:apply-templates mode="toc"
                            select="$datatypeProperties" />
                    </ul>
                </div>
            </xsl:if>
        </div>
        <div id="details">
            <h2 class="title">Details</h2>
            <xsl:apply-templates select="$classes" mode="details" />
            <xsl:apply-templates select="$objectProperties" mode="details" />
            <xsl:apply-templates select="$datatypeProperties" mode="details" />
        </div>
        
    </xsl:template>
    <!--=== ONTOLOGY ======================================================-->
    <xsl:template match="owl:Ontology[@rdf:about='']">
        <xsl:if test="./rdfs:label">
            <h1><xsl:value-of select="./rdfs:label" /></h1>
        </xsl:if>
        <xsl:apply-templates select="./dc:creator" />
        <xsl:if test="./dc:contributor">
            <h2>Contributors</h2>
            <ul>
                <xsl:apply-templates select="./dc:contributor" />
            </ul>
        </xsl:if>
        <div class="ontologyinfo">
            <p class="comment"><xsl:value-of select="./rdfs:comment" /></p>
        </div>
    </xsl:template>
    
    <!--Detailsmode templates =============================================-->
    <xsl:template match="owl:Class" mode="details">
        <xsl:variable name="localname">
            <xsl:choose>
                <xsl:when test="@rdf:ID">
                    <xsl:value-of select="@rdf:ID" />
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="substring(./@rdf:about, 2)" />
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="subclasses" select="$classes[
            rdfs:subClassOf[@rdf:resource=concat('#',$localname)]]" />
        <div id="{$localname}">
            <xsl:apply-templates select="@*" mode="full" />
            <xsl:apply-templates select="*" mode="full" />
            <xsl:if test="$subclasses">
            <dl>
                <dt>Subclasses:</dt>
                <dd><ul>
                    <xsl:apply-templates select="$subclasses" mode="toc" />
                </ul></dd>
            </dl>
            </xsl:if>
        </div>
    </xsl:template>
    <xsl:template match="*" mode="details">
        <xsl:variable name="localname">
            <xsl:choose>
                <xsl:when test="@rdf:ID">
                    <xsl:value-of select="@rdf:ID" />
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="substring(./@rdf:about, 2)" />
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <div id="{$localname}">
            <xsl:apply-templates select="@*" mode="full" />
            <xsl:apply-templates select="*" mode="full" />
        </div>
    </xsl:template>
    
    <!-- Fullmode templates ===============================================-->
    <xsl:template match="@rdf:about" mode="full">
        <h3><xsl:value-of select="substring(.,2)" /></h3>
    </xsl:template>
    <xsl:template match="@rdf:ID" mode="full">
        <h3><xsl:value-of select="." /></h3>
    </xsl:template>
    <xsl:template match="owl:unionOf" mode="full" />
    <xsl:template match="rdfs:isDefinedBy[@rdf:resource='']" mode="full" />
    <xsl:template match="@*" mode="full">
        <dl>
            <xsl:attribute name="class" select="name()" />
            <dt><xsl:value-of select="name()" /></dt>
            <dd><xsl:value-of select="." /></dd>
        </dl>
    </xsl:template>
    
    <!-- Shortmode templates ==============================================-->
    <xsl:template match="@xml:lang|@rdf:datatype" mode="short" />
    <xsl:template match="@rdf:resource" mode="short">
        <a href="{.}"><xsl:value-of select="." /></a>
    </xsl:template>
    <xsl:template match="owl:hasValue" mode="short">
        = <xsl:apply-templates />
    </xsl:template>
    <xsl:template match="owl:cardinality" mode="short">
        |n| = <xsl:apply-templates />
    </xsl:template>
    <xsl:template match="owl:minCardinality" mode="short">
        |n| &gt;= <xsl:apply-templates />
    </xsl:template>
    <xsl:template match="owl:maxCardinality" mode="short">
        |n| &lt;= <xsl:apply-templates />
    </xsl:template>
    <xsl:template match="owl:unionOf" mode="short">
        Union(<xsl:apply-templates mode="short" />)
    </xsl:template>
    <xsl:template match="owl:Class[not(@rdf:about) and not(@rdf:ID)]" 
        mode="short">
        <xsl:apply-templates mode="short" />
    </xsl:template>
    <xsl:template match="owl:onProperty" mode="short">
        <xsl:apply-templates select="@*" mode="short" />
    </xsl:template>
    <xsl:template match="@rdf:about" mode="short">
        <a href="{.}"><xsl:value-of select="." /></a>
    </xsl:template>
    <!--=== TOC ENTRIES ===================================================-->
    <xsl:template match="*" mode="toc">
        <xsl:variable name="localname">
            <xsl:choose>
                <xsl:when test="@rdf:ID">
                    <xsl:value-of select="@rdf:ID" />
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="substring(./@rdf:about, 2)" />
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <li>
            <a href="#{$localname}"><xsl:value-of select="$localname" /></a>
        </li>
    </xsl:template>
    
    <!-- Generic templates ================================================-->
    <xsl:template match="*" mode="full">
        <dl>
        <xsl:choose>
            <xsl:when test="boolean(./@xml:lang)">
                <dt><xsl:value-of select="name()"/> 
                    (<xsl:value-of select="@xml:lang" />):</dt>
                <dd>
                   <xsl:attribute name="xml:lang">
                       <xsl:value-of select="./@xml:lang" />
                   </xsl:attribute>
                   <xsl:apply-templates select="@*" mode="short" />
                   <xsl:apply-templates select="*" mode="short" />
                   <xsl:value-of select="text()" />
                </dd>
            </xsl:when>
            <xsl:otherwise>
                <dt><xsl:value-of select="name()"/>:</dt>
                <dd>
                    <xsl:apply-templates select="@*" mode="short" />
                    <xsl:apply-templates select="*" mode="short" />
                    <xsl:value-of select="text()" />
                </dd>
            </xsl:otherwise>
        </xsl:choose>
        </dl>
    </xsl:template>
    <xsl:template match="*" mode="short">
        <xsl:apply-templates select="@*" mode="short" />
        <xsl:apply-templates select=" *" mode="short" />
    </xsl:template>
    <xsl:template match="*"></xsl:template>
</xsl:stylesheet>